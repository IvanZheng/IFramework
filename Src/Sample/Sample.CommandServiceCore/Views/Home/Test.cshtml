@using IFramework.Infrastructure
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Test</title>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdn.bootcdn.net/ajax/libs/echarts/5.1.2/echarts.min.js"></script>
    <script>
        String.format = function () {
            var str = arguments[0];
            for (var i = 0; i < arguments.length - 1; i++) {
                var reg = new RegExp("\\{" + i + "\\}", "gm");
                str = str.replace(reg, arguments[i + 1]);
            }
            return str;
        }
        
        var showResult = function(result) {
            $("#result").prepend(result + "<br>");
        }
        var doSaga = function(commandName, command) {
            $.ajax({
                cache: false,
                contentType: "application/json",
                type: "POST",
                url: '@Url.Content("~/api/SagaApi/")' + commandName + '?t=' + new Date().getTime().toString(),
                data: JSON.stringify(command),
                success: function(data) {
                    if (data.errorCode == 0) {
                        showResult(JSON.stringify(data));
                    } else {
                        showResult(data.errorCode + " " + data.message);
                    }
                }
            });
        };



        var doCommand = function(commandName, command) {
            $.ajax({
                cache: false,
                //contentType: "application/json",
                type: "POST",
                url: '@Url.Content("~/api/Command/")' + commandName + '?t=' + new Date().getTime().toString(),
                data: command,//JSON.stringify(command),
                success: function(data) {
                    if (data.errorCode === 0) {
                        showResult(JSON.stringify(data));
                    } else {
                        showResult(data.errorCode + " " + data.message);
                    }
                }
            });
        };

        var batchCommandTest = function(commandName, command, batchCount) {
            $.cookie("batchCount", batchCount, { path: "/" });
            $.ajax({
                cache: false,
                type: "POST",
                url: '@Url.Content("~/api/BatchCommand/")' + commandName,
                data: command,
                success: function(data) {
                    if (data.errorCode == 0) {
                        showResult(data);
                    } else {
                        showResult(data.message);
                    }
                }

            });
        };

        $(function () {

            $("#btnMailboxProcess").click(function () {
                var batchCount = parseInt($("#batchCount").val());
                var id = $("#Id").val();
                for (var i = 0; i < batchCount; i++) {
                    $.post("@Url.Content("~/home/MailboxTest")", {id: id, number:1}, function (result) {
                        showResult(JSON.stringify(result));
                    })
                }
            });

            $("#doApi").click(function () {
                var batchCount = parseInt($("#batchCount").val());
                for (var i = 0; i < batchCount; i++) {
                    $.post("@Url.Content("~/home/doapi")", null, function (result) {
                        showResult(JSON.stringify(result));
                    })
                }
            });


            $("#pressureBtn").click(function() {
                $.ajax(
                    {
                        cache: false,
                        type: "POST",
                        url: '@Url.Content("~/api/values")',
                        data: {},
                        success: function(data) {
                            if (data.errorCode == 0) {
                                showResult(data);
                            } else {
                                showResult(data.message);
                            }
                        }

                    }
                );
            });

            $("#loginCommandSaga").click(function() {
                var username = $("#username").val();
                var password = $("#password").val();

                var loginCommand = {
                    UserName: username,
                    Password: password
                };
                doSaga("Login", loginCommand);
            });

            $("#batchRegisterCommand").click(function() {
                var username = $("#username").val();
                var password = $("#password").val();
                var batchCount = $("#batchCount").val();
                for (var i = 0;  i < batchCount; i ++)
                {
                    var registerCommand = {
                        UserName: username + "_" + i + "_" + new Date().getTime(), 
                        Password: password, 
                        Email: "ivan@r-soft.cn"
                    };
                    doCommand("send/Register", registerCommand);
                }
            });

            $("#batchLoginCommand").click(function() {
                var username = $("#username").val();
                var password = $("#password").val();
                var loginCommand = { UserName: username, Password: password };
                batchCommandTest("Login", loginCommand, $("#batchCount").val());
            });


            $("#modifyCommand").click(function() {
                var username = $("#username").val();
                var email = $("#email").val();

                var modifyCommand = {
                    UserName: username,
                    Email: email
                };
                doCommand("Modify", modifyCommand);
            });

            $("#registerCommand").click(function() {
                var username = $("#username").val();
                var password = $("#password").val();
                var registerCommand = {
                    UserName: username, Password: password, Email: "ivan@r-soft.cn", TagCollection: [{ Id: "id1", Name: "Name1" }, { Id: "id2", Name: "Name2"}] };
                doCommand("Register", registerCommand);
            });


            $("#loginCommand").click(function() {
                var username = $("#username").val();
                var password = $("#password").val();

                var loginCommand = {
                    UserName: username,
                    Password: password
                };
                doCommand("Login", loginCommand);
            });

            $("#btnRefreshCommandDistributorStatus").click(function() {
                refreshCommandDistributorStatus();
            });


            $("#closeMqBtn").click(function() {
                $.get("@Url.Content("~/api/mq/CloseMessageQueue")", null, function(data) {
                    if (data.errorCode === 0) {
                        showResult(data);
                    } else {
                        showResult(data.message);
                    }
                });
            });

            $("#btnReduceProduct").click(function () {
                var productId = $("#productId").val();
                var reduceCount = $("#reduceCount").val();

                var reduceProduct = {
                    productId: productId,
                    reduceCount: reduceCount
                };
                doCommand("ReduceProduct", reduceProduct);
            });

            var lastOffset = -1;
            var updateInterval = 3;
            var maxLength = 60;

            // 指定图表的配置项和数据
            var option = {
                legend: {
                    data: ['TPS']
                },
                xAxis: {
                    type: 'category',
                    boundaryGap: false,
                    splitLine: {
                        show: true,
                        lineStyle: {
                            color: ['#b3ceda'],
                            width: 1,
                            type: 'solid'
                        }
                    },
                    data: []
                },
                yAxis: {
                    type: 'value',
                    axisLabel: {
                        show: true,
                        interval: 'auto',
                        //formatter: function(value, index) {
                        //    return value.toFixed(0);
                        //}
                    }
                },
                series: [
                    {
                        name: 'TPS',
                        data: [],
                        type: 'line',
                        smooth: true,
                        areaStyle: {
                            normal: {
                                color: '#d5e4eb'
                            }
                        },
                        itemStyle: {
                            normal: {
                                color: '#d5e4eb', //改变折线点的颜色
                                lineStyle: {
                                    color: '#b3ceda' //改变折线颜色
                                }
                            }
                        }
                    }
                ]
            };

            function updateTps() {
                var topic = $("#topic").val();
                var group = $("#group").val();
                $.get("@Url.Content("~/Home/ConsumerOffsets")" + String.format("?group={0}&topic={1}", group, topic),
                    null,
                    function(result) {
                        var processedTps = 0;
                        if (lastOffset >= 0) {
                            processedTps = parseInt((result.offset - lastOffset) / updateInterval);
                            if (result.offset < 0) {
                                processedTps = 0;
                            }
                        }
                        var status = String.format("topic:{0} group:{1} offset:{4} lag: {2} tps: {3}", topic, group, result.totalLag, processedTps, result.offset);
                        $("#consumerTps").text(status);
                        if (option.xAxis.data.length >= maxLength) {
                            option.xAxis.data.shift();
                            option.series[0].data.shift();
                        }
                        option.series[0].data.push(processedTps);
                        option.xAxis.data.push(new Date().getHours() + ':' + new Date().getMinutes() + ':' + new Date().getSeconds());
                        myChart.setOption(option);
                        lastOffset = result.offset;
                    });
            }

            // 基于准备好的dom，初始化echarts实例
            var myChart = echarts.init(document.getElementById('main'));
            
            updateTps();

            //setInterval(updateTps, updateInterval * 1000);

        });
        var refreshCommandDistributorStatus = function() {
            $.get("@Url.Content("~/Test/CommandDistributorStatus")",
                null,
                function(result) {
                    $("#commandDistributorStatus").html(result);
                });
        };

       
    </script>
</head>
<body>
    <mini-profiler />
    <a href="@Url.Action("SignOut")">logoff</a>
    <input type="button" value="RefreshCommandDistributorStatus" id="btnRefreshCommandDistributorStatus" />
    @(Guid.NewGuid().ToString().GetUniqueCode())
<div id="commandDistributorStatus">
    
</div>
<div>
    <label>topic:</label><input type="text" id="topic" placeholder="topic" value="@(Environment.MachineName).uat.commandqueue" />
    <label>group:</label><input type="text" id="group" placeholder="group" value="@(Environment.MachineName).uat.commandqueue.consumer"/>
    <div id="consumerTps"></div>
    <div id="main" style="width: 400px;height:250px;"></div>
</div>
   
    <br />
    <input type="button" value="CloseMessageQueue" id="closeMqBtn" />
    <input type="text" value="10" id="batchCount" />
    <input type="text" value="ivan" id="username" />
    <input type="password" value="123456" id="password" />

    <input id="registerCommand" type="button" value="RegisterCommand" />
    <input id="loginCommand" type="button" value="LoginCommand" />
    <input id="loginCommandSaga" type="button" value="LoginCommandSaga" />


    <div>
        <input id="batchRegisterCommand" type="button" value="BatchRegisterCommand" />
        <input id="batchLoginCommand" type="button" value="BatchLoginCommand" />
    </div>

    <div>
        <input type="text" value="email" id="email" />
        <input id="modifyCommand" type="button" value="ModifyCommand" />
        <input id="doApi" type="button" value="doApi" />
    </div>

    <div>
        <input type="button" value="Api pressure test" id="pressureBtn" />
    </div>
    <div>
        <input type="text" placeholder="productId" id="productId" />
        <input type="text" placeholder="reduceCount" id="reduceCount" />
        <input id="btnReduceProduct" type="button" value="ReduceProduct" />
        <input id="btnMailboxProcess" type="button" value="MailboxProcess" />
        MailboxValue:<span>@ViewBag.MailboxValue</span>
        MailboxStatus:<span>@ViewBag.MailboxStatus</span>

    </div>
    @using (Html.BeginForm("PostAddRequest", "Home", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.TextBox("Id", "id");
        @Html.TextBox("Name", "name");
        <input type="file" name="file1" />
        <button type="submit">submit</button>
    }

    <div id="result">

    </div>
</body>
</html>

